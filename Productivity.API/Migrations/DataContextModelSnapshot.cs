// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Productivity.API.Data.Context;

#nullable disable

namespace Productivity.API.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Productivity.Shared.Models.Entity.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("Accounts", t =>
                        {
                            t.HasCheckConstraint("CH_Email_Account", "Email like '%@%.%'");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("f0e290a9-9054-4ae7-af3b-08dad84feb5b"),
                            Email = "admin@admin.com",
                            Login = "admin",
                            Password = "$2a$11$GHH6LndY06sRhobMuKN76eRFUlPdjvIQ53lKJd0smCkFh/VLyVqke"
                        });
                });

            modelBuilder.Entity("Productivity.Shared.Models.Entity.Culture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("CostToPlant")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("PriceToSell")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Cultures", t =>
                        {
                            t.HasCheckConstraint("CH_CostToPlant", "CostToPlant > 0");

                            t.HasCheckConstraint("CH_PriceToSell", "PriceToSell > 0");
                        });
                });

            modelBuilder.Entity("Productivity.Shared.Models.Entity.Productivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CultureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ProductivityValue")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("Year")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CultureId");

                    b.HasIndex("RegionId");

                    b.ToTable("Productivities", t =>
                        {
                            t.HasCheckConstraint("CH_ProductivityValue", "ProductivityValue > 0");
                        });
                });

            modelBuilder.Entity("Productivity.Shared.Models.Entity.Region", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("Productivity.Shared.Models.Entity.Token", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TokenStr")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("TokenStr")
                        .IsUnique();

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("Productivity.Shared.Models.Entity.Productivity", b =>
                {
                    b.HasOne("Productivity.Shared.Models.Entity.Culture", "Culture")
                        .WithMany("Productivities")
                        .HasForeignKey("CultureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Productivity.Shared.Models.Entity.Region", "Region")
                        .WithMany("Productivities")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Culture");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Productivity.Shared.Models.Entity.Token", b =>
                {
                    b.HasOne("Productivity.Shared.Models.Entity.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Productivity.Shared.Models.Entity.Culture", b =>
                {
                    b.Navigation("Productivities");
                });

            modelBuilder.Entity("Productivity.Shared.Models.Entity.Region", b =>
                {
                    b.Navigation("Productivities");
                });
#pragma warning restore 612, 618
        }
    }
}
